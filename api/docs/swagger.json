{
  "openapi": "3.0.3",
  "info": {
    "title": "Tomas API",
    "version": "3.0.0",
    "description": "\n        Personal and Home finance projection and expense tracking application API.\n        \n        ## Authentication\n        Most endpoints require JWT authentication. Include the token in the Authorization header:\n        ```\n        Authorization: Bearer <your-jwt-token>\n        ```\n        \n        ## Parameter Naming Convention\n        All API endpoints use `snake_case` for query parameters and request body fields.\n        \n        ## Breaking Changes (v2.0.0)\n        - Removed legacy `/transactions?book_id=...` endpoint - use `/books/{id}/transactions` instead\n        - All parameters now use `snake_case` (e.g., `account_id`, `start_date`, `end_date`, `up_to_date`)\n      ",
    "contact": {
      "name": "Tomas API Support",
      "url": "https://github.com/levhita/tomas"
    },
    "license": {
      "name": "GPL-3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    },
    {
      "url": "https://api.tomas.example.com/api",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "admin"
          },
          "superadmin": {
            "type": "boolean",
            "example": true
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "account_id": {
            "type": "integer",
            "example": 456
          },
          "category_id": {
            "type": "integer",
            "nullable": true,
            "example": 789
          },
          "amount": {
            "type": "number",
            "format": "float",
            "example": -50,
            "description": "Negative for expenses, positive for income"
          },
          "description": {
            "type": "string",
            "example": "Grocery shopping"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Weekly groceries"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2024-01-15"
          },
          "exercised": {
            "type": "boolean",
            "example": true,
            "description": "Whether the transaction has been executed"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "TransactionInput": {
        "type": "object",
        "required": [
          "account_id",
          "amount",
          "description",
          "date"
        ],
        "properties": {
          "account_id": {
            "type": "integer",
            "example": 456
          },
          "category_id": {
            "type": "integer",
            "nullable": true,
            "example": 789
          },
          "amount": {
            "type": "number",
            "format": "float",
            "example": -50,
            "description": "Negative for expenses, positive for income"
          },
          "description": {
            "type": "string",
            "example": "Grocery shopping"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Weekly groceries"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2024-01-15"
          },
          "exercised": {
            "type": "boolean",
            "default": true,
            "example": true
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "book_id": {
            "type": "integer",
            "example": 123
          },
          "name": {
            "type": "string",
            "example": "Checking Account"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Main checking account"
          },
          "type": {
            "type": "string",
            "enum": [
              "debit",
              "credit"
            ],
            "example": "debit"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "AccountInput": {
        "type": "object",
        "required": [
          "name",
          "book_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Checking Account"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Main checking account"
          },
          "type": {
            "type": "string",
            "enum": [
              "debit",
              "credit"
            ],
            "default": "debit",
            "example": "debit"
          },
          "book_id": {
            "type": "integer",
            "example": 123
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "book_id": {
            "type": "integer",
            "example": 123
          },
          "parent_category_id": {
            "type": "integer",
            "nullable": true,
            "example": null
          },
          "name": {
            "type": "string",
            "example": "Food & Dining"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Restaurant and grocery expenses"
          },
          "type": {
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "example": "expense"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "CategoryInput": {
        "type": "object",
        "required": [
          "name",
          "book_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Food & Dining"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Restaurant and grocery expenses"
          },
          "parent_category_id": {
            "type": "integer",
            "nullable": true,
            "example": null,
            "description": "Optional parent category ID for hierarchical categories"
          },
          "book_id": {
            "type": "integer",
            "example": 123
          },
          "type": {
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "default": "expense",
            "example": "expense",
            "description": "Category type (ignored if parent_category_id is provided)"
          }
        }
      },
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 123
          },
          "team_id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Personal Budget"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Main personal budget book"
          },
          "currency_symbol": {
            "type": "string",
            "example": "$"
          },
          "week_start": {
            "type": "string",
            "enum": [
              "sunday",
              "monday"
            ],
            "example": "monday"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          }
        }
      },
      "Team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Family Budget Team"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Team for managing family finances"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "collaborator",
              "viewer"
            ],
            "example": "admin",
            "description": "User role in the team (included when listing user teams)"
          }
        }
      },
      "BookInput": {
        "type": "object",
        "required": [
          "name",
          "teamId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Personal Budget"
          },
          "teamId": {
            "type": "integer",
            "example": 1
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Main personal budget book"
          },
          "currency_symbol": {
            "type": "string",
            "default": "$",
            "example": "$"
          },
          "week_start": {
            "type": "string",
            "enum": [
              "sunday",
              "monday"
            ],
            "default": "monday",
            "example": "monday"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "Resource not found"
          },
          "code": {
            "type": "string",
            "example": "NOT_FOUND"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "message": "Invalid request parameters",
              "code": "BAD_REQUEST"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "message": "Authentication required",
              "code": "UNAUTHORIZED"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Access forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "message": "Access forbidden",
              "code": "FORBIDDEN"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "message": "Resource not found",
              "code": "NOT_FOUND"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "Health",
      "description": "API health and status checks"
    },
    {
      "name": "Transactions",
      "description": "Financial transaction management"
    },
    {
      "name": "Accounts",
      "description": "Account management and balance queries"
    },
    {
      "name": "Books",
      "description": "Financial book management"
    },
    {
      "name": "Categories",
      "description": "Transaction category management"
    },
    {
      "name": "Users",
      "description": "User management (admin only)"
    },
    {
      "name": "Teams",
      "description": "Team and collaboration management"
    }
  ],
  "paths": {
    "/accounts/{id}": {
      "get": {
        "summary": "Get details for a single account",
        "description": "Retrieve details for a specific account by ID. Requires read access to the account's book.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Account ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing account",
        "description": "Update all fields of an existing account. Requires write access to the account's book via team membership.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Account ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Account Name"
                  },
                  "note": {
                    "type": "string",
                    "nullable": true,
                    "example": "Updated account description"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "debit",
                      "credit"
                    ],
                    "example": "debit"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to update account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an account",
        "description": "Permanently delete an account. Cannot delete accounts that have associated transactions. Requires write access to the account's book.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Account ID to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Account deleted successfully (no content)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "428": {
            "description": "Cannot delete account with transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "Cannot delete account with transactions",
                  "code": "PRECONDITION_REQUIRED"
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/balance": {
      "get": {
        "summary": "Get current balance for an account, optionally up to a specific date",
        "description": "Calculate account balance with exercised and projected totals, optionally filtered by date.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Account ID"
          },
          {
            "in": "query",
            "name": "up_to_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Optional date filter in YYYY-MM-DD format",
            "example": "2024-04-30"
          }
        ],
        "responses": {
          "200": {
            "description": "Account balance information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "account_id": {
                      "type": "integer",
                      "example": 123
                    },
                    "exercised_balance": {
                      "type": "number",
                      "format": "float",
                      "example": 1500.5,
                      "description": "Balance from exercised transactions only"
                    },
                    "projected_balance": {
                      "type": "number",
                      "format": "float",
                      "example": 1200.75,
                      "description": "Balance including all transactions"
                    },
                    "up_to_date": {
                      "type": "string",
                      "format": "date",
                      "nullable": true,
                      "example": "2024-04-30"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to calculate balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "summary": "Create a new account",
        "description": "Create a new account within a book. Requires write access to the book via team membership.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to create account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books/{id}": {
      "get": {
        "summary": "Get details for a single book",
        "description": "Retrieve details for a specific book by ID. Requires read access via team membership.",
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Book ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Book details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "Update book details",
        "description": "Update all fields of an existing book. Requires write access via team membership (admin or collaborator).",
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Book ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Book Name"
                  },
                  "note": {
                    "type": "string",
                    "nullable": true,
                    "example": "Updated book description"
                  },
                  "currency_symbol": {
                    "type": "string",
                    "example": "€"
                  },
                  "week_start": {
                    "type": "string",
                    "enum": [
                      "sunday",
                      "monday"
                    ],
                    "example": "sunday"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to update book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Soft delete a book",
        "description": "Mark a book as deleted (soft delete). The book can be restored later. Requires admin access via team membership.",
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Book ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Book deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to delete book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books/{id}/accounts": {
      "get": {
        "summary": "Get all accounts for a specific book",
        "description": "Retrieve all accounts belonging to a specific book. Requires read access via team membership.",
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Book ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts for the book",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books/{id}/categories": {
      "get": {
        "summary": "Get all categories for a specific book",
        "description": "Retrieve all categories belonging to a specific book, ordered alphabetically by name. Requires read access via team membership.",
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Book ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories for the book ordered alphabetically by name",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books/{id}/transactions": {
      "get": {
        "summary": "Get all transactions for accounts in a specific book",
        "description": "Retrieve all transactions for accounts within a book with optional filtering by account, date range.",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Book ID"
          },
          {
            "in": "query",
            "name": "account_id",
            "schema": {
              "type": "integer"
            },
            "description": "Optional filter by specific account ID within the book"
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Optional start date filter (YYYY-MM-DD format)",
            "example": "2024-01-01"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Optional end date filter (YYYY-MM-DD format)",
            "example": "2024-12-31"
          }
        ],
        "responses": {
          "200": {
            "description": "List of transactions for the book ordered by date",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books": {
      "post": {
        "summary": "Create a new book within a team",
        "description": "Create a new financial book within a specified team. Requires admin or collaborator access to the team.",
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to create book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books/{id}/restore": {
      "post": {
        "summary": "Restore a soft-deleted book",
        "description": "Restore a previously soft-deleted book to active status. Requires admin access via team membership.",
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Book ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Book restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "description": "Book is already active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "Book is already active",
                  "code": "BAD_REQUEST"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to restore book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books/{id}/permanent": {
      "delete": {
        "summary": "Permanently delete a book and cascade delete all related data",
        "description": "Permanently delete a book and all its related data. This action cannot be undone.\n\n**Prerequisites:**\n- Book must be soft-deleted first\n- Requires team admin access\n\n**Cascade deletion includes:**\n- All transactions in book accounts\n- All account totals\n- All categories (including hierarchical categories)\n- All accounts\n- The book itself\n",
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Book ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Book permanently deleted successfully (no content)"
          },
          "400": {
            "description": "Book must be soft-deleted before permanent deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "Book must be soft-deleted before permanent deletion",
                  "code": "BAD_REQUEST"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to permanently delete book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "summary": "Get details for a single category",
        "description": "Retrieve details for a specific category by ID. Requires read access to the category's book via team membership.",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Category details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing category",
        "description": "Update an existing category. Supports hierarchical category management with strict constraints.\n\n**Hierarchy constraints:**\n- A category cannot be its own parent\n- A category with children cannot become a child of another category\n- Parent category must belong to the same book\n- If parent_category_id is provided, that category must not have a parent itself\n- Child categories must have the same type as their parent\n- When a parent category type changes, all child categories inherit the new type\n- When moving a category to a different parent, type is inherited from new parent\n",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Category ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Category name"
                  },
                  "note": {
                    "type": "string",
                    "nullable": true,
                    "description": "Category description or notes"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "expense",
                      "income"
                    ],
                    "description": "Category type (note - may be overridden by parent inheritance)"
                  },
                  "parent_category_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Parent category ID for hierarchical categories"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "428": {
            "description": "Precondition Failed - Hierarchy constraint violation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to update category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a category (soft delete)",
        "description": "Mark a category as deleted (soft delete). The category will be marked as deleted \nand excluded from future queries but preserved in the database for data integrity.\n\n**Constraints:**\n- Cannot delete categories that have child categories\n- Cannot delete categories that are referenced by transactions\n",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Category ID to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted successfully (No Content)"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "428": {
            "description": "Precondition Failed - Category has dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Cannot delete category with subcategories or referenced by transactions"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "summary": "Create a new category",
        "description": "Create a new category within a book. Supports hierarchical categories with parent-child relationships.\n\n**Hierarchy constraints:**\n- If parent_category_id is provided, that category must not have a parent itself\n- Parent category must belong to the same book\n- Child categories automatically inherit parent type (type parameter is ignored)\n- Categories can only be nested two levels deep\n",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Failed to create category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Performs a health check of the API and database connection",
        "description": "Public endpoint for load balancers and basic monitoring. Checks API server availability and database connectivity.",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "API and database are healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "API or database are unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unhealthy"
                    },
                    "error": {
                      "type": "string",
                      "example": "Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health/admin": {
      "get": {
        "summary": "Detailed health check with system information for administrators",
        "description": "Provides comprehensive system metrics including memory usage, database statistics, and environment information.",
        "tags": [
          "Health"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed health status with system metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-12-18T10:30:00.000Z"
                    },
                    "uptime": {
                      "type": "number",
                      "example": 3600
                    },
                    "memory": {
                      "type": "object",
                      "properties": {
                        "used": {
                          "type": "number",
                          "example": 150
                        },
                        "total": {
                          "type": "number",
                          "example": 200
                        },
                        "free": {
                          "type": "number",
                          "example": 50
                        },
                        "rss": {
                          "type": "number",
                          "example": 180
                        }
                      }
                    },
                    "database": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "connected"
                        },
                        "response_time": {
                          "type": "string",
                          "example": "5ms"
                        },
                        "connections": {
                          "type": "string",
                          "example": "10"
                        },
                        "tables": {
                          "type": "number",
                          "example": 15
                        }
                      }
                    },
                    "environment": {
                      "type": "object",
                      "properties": {
                        "node_version": {
                          "type": "string",
                          "example": "v18.17.0"
                        },
                        "platform": {
                          "type": "string",
                          "example": "linux"
                        },
                        "arch": {
                          "type": "string",
                          "example": "x64"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Health check failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unhealthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime": {
                      "type": "number"
                    },
                    "memory": {
                      "type": "object"
                    },
                    "database": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "error"
                        }
                      }
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health/stats": {
      "get": {
        "summary": "Get dashboard statistics for administrators",
        "description": "Provides comprehensive statistics about users, teams, and books for the admin dashboard.",
        "tags": [
          "Health"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics for the admin dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 150
                        },
                        "active": {
                          "type": "number",
                          "example": 120
                        },
                        "superadmins": {
                          "type": "number",
                          "example": 5
                        }
                      }
                    },
                    "teams": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 25
                        },
                        "active": {
                          "type": "number",
                          "example": 20
                        }
                      }
                    },
                    "books": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 45
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Failed to retrieve statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "API home page",
        "description": "Renders the API home page with basic information about the application",
        "tags": [
          "General"
        ],
        "responses": {
          "200": {
            "description": "API home page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "description": "HTML page with API information"
                }
              }
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "summary": "List all teams accessible to the current user",
        "description": "Retrieve all teams that the authenticated user is a member of, including their role in each team.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of teams the user has access to",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Failed to fetch teams",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new team",
        "description": "Create a new team with the authenticated user as admin. Any authenticated user can create teams.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Family Budget Team",
                    "description": "Team name (required)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Failed to create team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/teams/search": {
      "get": {
        "summary": "Search teams by name",
        "description": "Search for teams by name. Admin only endpoint for team management.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "description": "Search query for team names",
            "example": "budget"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of results"
          },
          {
            "in": "query",
            "name": "includeDeleted",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include deleted teams in results"
          }
        ],
        "responses": {
          "200": {
            "description": "List of teams matching the search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Failed to search teams",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/teams/all": {
      "get": {
        "summary": "Get all teams with statistics (superadmin only)",
        "description": "Retrieve all teams with comprehensive statistics including user counts and book counts.\nCan filter to show only soft-deleted teams (recycle bin).\n",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "deleted",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If true, return only soft-deleted teams (recycle bin). Default returns active teams."
          }
        ],
        "responses": {
          "200": {
            "description": "List of all teams with statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Team"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "user_count": {
                            "type": "integer",
                            "example": 5
                          },
                          "admin_count": {
                            "type": "integer",
                            "example": 2
                          },
                          "collaborator_count": {
                            "type": "integer",
                            "example": 2
                          },
                          "viewer_count": {
                            "type": "integer",
                            "example": 1
                          },
                          "book_count": {
                            "type": "integer",
                            "example": 3
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Failed to fetch teams",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/teams/{id}": {
      "get": {
        "summary": "Get details for a single team",
        "description": "Retrieve details for a specific team by ID. Requires read access to the team or superadmin privileges.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Team details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a team",
        "description": "Update team details. Requires admin access to the team or superadmin privileges.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Updated Team Name",
                    "description": "New team name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to update team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Soft-delete a team",
        "description": "Mark a team as deleted (soft delete). The team can be restored later. Requires admin access to the team.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Team soft-deleted successfully (no content)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to delete team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{id}/users": {
      "post": {
        "summary": "Add a user to a team",
        "description": "Add a user to a team with a specified role. Requires admin access to the team or superadmin privileges.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "role"
                ],
                "properties": {
                  "userId": {
                    "type": "integer",
                    "example": 123,
                    "description": "ID of the user to add to the team"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "admin",
                      "collaborator",
                      "viewer"
                    ],
                    "example": "collaborator",
                    "description": "Role to assign to the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User added to team successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string",
                            "enum": [
                              "admin",
                              "collaborator",
                              "viewer"
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "User already in team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to add user to team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List all users in a team",
        "description": "Retrieve all users who are members of a specific team, including their roles. Requires read access to the team or superadmin privileges.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of team users with their roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string",
                            "enum": [
                              "admin",
                              "collaborator",
                              "viewer"
                            ],
                            "description": "User's role in the team"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch team users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{id}/users/add-by-username": {
      "post": {
        "summary": "Add a user to a team by username",
        "description": "Add a user to a team by their username with a specified role. Requires admin access to the team or superadmin privileges.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "role"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 1,
                    "example": "john_doe",
                    "description": "Username of the user to add to the team"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "admin",
                      "collaborator",
                      "viewer"
                    ],
                    "example": "collaborator",
                    "description": "Role to assign to the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User added to team successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string",
                            "enum": [
                              "admin",
                              "collaborator",
                              "viewer"
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "User not found or team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "User already in team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to add user to team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{id}/users/{userId}": {
      "delete": {
        "summary": "Remove a user from a team",
        "description": "Remove a user from a team. Prevents removing the last admin unless performed by superadmin. Requires admin access to the team or superadmin privileges.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID to remove from the team"
          }
        ],
        "responses": {
          "204": {
            "description": "User removed from team successfully (no content)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Cannot remove the last admin from the team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to remove user from team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a user's role in a team",
        "description": "Update a user's role within a team. Prevents removing the last admin unless performed by superadmin. Requires admin access to the team or superadmin privileges.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "admin",
                      "collaborator",
                      "viewer"
                    ],
                    "example": "collaborator",
                    "description": "New role to assign to the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string",
                            "enum": [
                              "admin",
                              "collaborator",
                              "viewer"
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Cannot remove the last admin from the team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to update user role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{id}/books": {
      "get": {
        "summary": "List all books for a specific team",
        "description": "Retrieve all books belonging to a specific team. Requires read access to the team.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of books for the team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Book"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "team_name": {
                            "type": "string",
                            "example": "Family Budget Team",
                            "description": "Name of the team that owns the book"
                          },
                          "role": {
                            "type": "string",
                            "enum": [
                              "admin",
                              "collaborator",
                              "viewer"
                            ],
                            "description": "User's role in the team"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch books",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{id}/restore": {
      "post": {
        "summary": "Restore a soft-deleted team",
        "description": "Restore a previously soft-deleted team to active status. Superadmin only.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Team restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "Team is not deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to restore team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{id}/permanent": {
      "delete": {
        "summary": "Permanently delete a team and all associated data",
        "description": "Permanently delete a team and all its associated data. This action cannot be undone.\nSuperadmin only.\n\n**Cascade deletion includes:**\n- All transactions in team books\n- All accounts in team books\n- All categories in team books\n- All books belonging to the team\n- All team user relationships\n- The team itself\n",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Team ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Team permanently deleted successfully (no content)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to permanently delete team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "summary": "Get details for a single transaction",
        "description": "Retrieve details for a specific transaction by ID. Requires read access to the account's book.",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing transaction",
        "description": "Update all fields of an existing transaction. Requires write access to the transaction's account book.",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Transaction ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to update transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a transaction",
        "description": "Permanently delete a transaction. Requires write access to the transaction's account book.",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Transaction ID to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction deleted successfully (no content)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to delete transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "summary": "Create a new transaction",
        "description": "Create a new transaction within an account. Requires write access to the account's book.",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Failed to create transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Authenticate a user and generate a JWT token",
        "description": "Login endpoint for user authentication. Returns user data and JWT token for subsequent API calls.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "secretpassword"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Authentication failed due to server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "summary": "Search users by username (for adding to teams)",
        "description": "Search for users by username with optional team membership status. Admin only endpoint.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search query (username partial match)",
            "example": "john"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            },
            "description": "Maximum number of results"
          },
          {
            "in": "query",
            "name": "team_id",
            "schema": {
              "type": "integer"
            },
            "description": "Optional team ID to check membership status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching users with membership status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "is_member": {
                            "type": "boolean",
                            "description": "Whether user is member of specified team"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Failed to search users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get list of all users with team statistics",
        "description": "Retrieve a paginated list of all users with search and filtering capabilities. Admin only endpoint.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of users per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query for username"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "superadmin",
                "regular"
              ]
            },
            "description": "Filter by user role"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users with pagination info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/User"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "team_count": {
                                "type": "integer",
                                "description": "Number of teams user belongs to"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Failed to fetch users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Create a new user account. Only superadmins can create users and assign admin privileges.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 1,
                    "example": "john_doe",
                    "description": "Unique username for the new user"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 1,
                    "example": "securepassword123",
                    "description": "Password for the new user"
                  },
                  "superadmin": {
                    "type": "boolean",
                    "default": false,
                    "example": false,
                    "description": "Whether the user should have superadmin privileges"
                  },
                  "active": {
                    "type": "boolean",
                    "default": true,
                    "example": true,
                    "description": "Whether the user account should be active"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "Username already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to create user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get current user's information",
        "description": "Retrieve the authenticated user's profile information (excluding password).",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/me/teams": {
      "get": {
        "summary": "Get current user's teams",
        "description": "Retrieve all teams that the authenticated user is a member of, including their roles in each team.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of teams the user has access to with their roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Team"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string",
                            "enum": [
                              "admin",
                              "collaborator",
                              "viewer"
                            ],
                            "description": "User's role in the team"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Failed to fetch user teams",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/select-team": {
      "post": {
        "summary": "Select a team and generate new JWT token with team information",
        "description": "Select a team context and receive a new JWT token that includes team information for subsequent API calls.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "team_id"
                ],
                "properties": {
                  "team_id": {
                    "type": "integer",
                    "example": 123,
                    "description": "ID of the team to select"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team selected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "New JWT token with team information"
                    },
                    "team": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 123
                        },
                        "name": {
                          "type": "string",
                          "example": "Family Budget Team"
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "admin",
                            "collaborator",
                            "viewer"
                          ],
                          "example": "admin"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Failed to select team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/exit-team": {
      "post": {
        "summary": "Exit team mode and return to admin mode",
        "description": "Remove team information from JWT token and return to general user mode without team context.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully exited team mode",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "New JWT token without team information"
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully exited team mode"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Failed to exit team mode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get a single user by ID",
        "description": "Retrieve user information by ID. Users can access their own data, superadmins can access any user.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing user",
        "description": "Update user information. Users can update their own data (except superadmin flag), \nsuperadmins can update any user. Password changes for own account require current password.\n",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "new_username",
                    "description": "New username (must be unique)"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "newpassword123",
                    "description": "New password"
                  },
                  "current_password": {
                    "type": "string",
                    "format": "password",
                    "example": "currentpassword",
                    "description": "Current password (required when user updates own password)"
                  },
                  "superadmin": {
                    "type": "boolean",
                    "example": false,
                    "description": "Superadmin status (superadmin only)"
                  },
                  "active": {
                    "type": "boolean",
                    "example": true,
                    "description": "Account active status (superadmin only)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Username already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to update user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Permanently delete a user account. Superadmin only. Users cannot delete their own accounts \nas a safety measure to prevent accidental loss of admin access.\n",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully (no content)"
          },
          "400": {
            "description": "Cannot delete own account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Cannot delete user that is a member of teams",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/teams": {
      "get": {
        "summary": "Get team access for a specific user",
        "description": "Retrieve all teams that a specific user is a member of, including their roles. Superadmin only.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of teams the user has access to with their roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Team"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string",
                            "enum": [
                              "admin",
                              "collaborator",
                              "viewer"
                            ],
                            "description": "User's role in the team"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the user was added to the team"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to fetch user teams",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/enable": {
      "put": {
        "summary": "Enable a user account",
        "description": "Activate a disabled user account. Superadmin only.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User enabled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User enabled successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User is already enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to enable user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/disable": {
      "put": {
        "summary": "Disable a user account",
        "description": "Deactivate a user account. Superadmin only. Users cannot disable their own accounts.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User disabled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User disabled successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User is already disabled or cannot disable own account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Failed to disable user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  }
}